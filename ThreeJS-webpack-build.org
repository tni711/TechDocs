
* ThreeJS Development Platform Setup
Setup Django to serve ThreeJS games.

** Webpack build configuration files

- Package.json
#+BEGIN_SRC json
{
  "name": "threegames",
  "version": "1.0.0",
  "description": "ThreeJS Playground",
  "main": "index.js",
  "scripts": {
    "dev": "webpack serve --config ./webpack.dev.js",
    "prod": "webpack --config ./webpack.prod.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/simondevyoutube/ThreeJS_Tutorial_BasicWorld.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/simondevyoutube/ThreeJS_Tutorial_BasicWorld/issues"
  },
  "homepage": "localhost:8080:/",
  "devDependencies": {
    "@types/dat.gui": "^0.7.7",
    "@types/three": "^0.144.0",
    "dat.gui": "^0.7.9",
    "three": "^0.144.0",
    "ts-loader": "^9.3.1",
    "typescript": "^4.8.2",
    "webpack": "^5.74.0",
    "webpack-cli": "^4.10.0",
    "webpack-dev-server": "^4.10.1",
    "webpack-merge": "^5.8.0"
  }
}
#+END_SRC


- webpack.common.js
Multi entry points used.

#+BEGIN_SRC js
const path = require('path')

module.exports = {
    entry: {
        app1:'./src/client-setup.ts',
        app2:'./src/client-ambient-light.ts',
        app3:'./src/client-anistropic-filter.ts',
        app4:'./src/client-basic-mat.ts',
        app5:'./src/client-bump-map.ts',
        app6:'./src/client-glb-animation.ts',
        app7:'./src/client-pbx-table.ts',
    },
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                use: 'ts-loader',
                exclude: /node_modules/,
            },
        ],
    },
    resolve: {
        extensions: ['.tsx', '.ts', '.js'],
    },
    output: {
        filename: '[name].js',
        path: path.resolve(__dirname, '../playground/static/'),
    },
}
#+END_SRC

- webpack.dev.js
#+BEGIN_SRC js
const { merge } = require('webpack-merge')
const common = require('./webpack.common.js')
const path = require('path');

module.exports = merge(common, {
    mode: 'development',
    devtool: 'eval-source-map',
    devServer: {
        static: {
            directory: path.join(__dirname, '../playgroupd/static'),
        },
        hot: true,
    },
})
#+END_SRC


- webpack.prod.js
#+BEGIN_SRC js
const { merge } = require('webpack-merge')
const common = require('./webpack.common.js')

module.exports = merge(common, {
    mode: 'production',
    performance: {
        hints: false,
    },
})
#+END_SRC


- tsconfig.js
#+BEGIN_SRC json
"compilerOptions": {
    "moduleResolution": "node",
    "strict": true,
    "noImplicitAny": false
},
"include": ["**/*.ts"]
}
#+END_SRC

** Django server setup to deploy ThreeJS games

- Setting

#+BEGIN_SRC python
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = 'xyz'
DEBUG = True
ALLOWED_HOSTS = ["localhost", "gameserver"]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'annimation'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'playground.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates"), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'playground.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static-prd/')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

STATIC_DIR_PATH = "%s/static/" % (Path(__file__).resolve().parent.parent)
STATICFILES_DIRS = [
    STATIC_DIR_PATH
]

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
#+END_SRC


-- urls

#+BEGIN_SRC python
from django.contrib import admin
from django.conf import settings
from django.urls import path
from django.conf.urls.static import static
from django.views.generic import TemplateView

from annimation.views import AnnimationPage

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', AnnimationPage.as_view(), name="home"),
    path('app1/', TemplateView.as_view(template_name="app1.html")),
    path('app2/', TemplateView.as_view(template_name="app2.html")),
    path('app3/', TemplateView.as_view(template_name="app3.html")),
    path('app4/', TemplateView.as_view(template_name="app4.html")),
    path('app5/', TemplateView.as_view(template_name="app5.html")),
    path('app6/', TemplateView.as_view(template_name="app6.html")),
    path('app7/', TemplateView.as_view(template_name="app7.html")),
]

urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
#+END_SRC
